generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  DRIVER
  RESTAURANT
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  phone        String?      @unique
  passwordHash String
  role         Role         @default(CUSTOMER)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  restaurants Restaurant[]  // user can own multiple restaurants
  orders      Order[]       @relation("CustomerOrders")
  driverProfile DriverProfile?
  ordersAsDriver Order[]    @relation("DriverOrders")
}

model Restaurant {
  id          String      @id @default(cuid())
  ownerId     String
  name        String
  description String?
  phone       String?     @unique
  email       String?     @unique
  logoUrl     String?
  bannerUrl   String?
  address     String?
  city        String?
  lat         Float?
  lng         Float?
  isOpen      Boolean     @default(true)
  openingTime String?
  closingTime String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  owner      User        @relation(fields: [ownerId], references: [id])
  menuItems  MenuItem[]
  orders     Order[]
}

model MenuItem {
  id           String      @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  imageUrl     String?
  isAvailable  Boolean     @default(true)
  createdAt    DateTime    @default(now())

  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems  OrderItem[]

  @@index([restaurantId])
}

model Order {
  id              String        @id @default(cuid())
  customerId      String
  restaurantId    String
  driverId        String?
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH)
  total           Decimal       @db.Decimal(10, 2)
  addressSnapshot Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer   User       @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  driver     User?      @relation("DriverOrders", fields: [driverId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  name       String
  price      Decimal  @db.Decimal(10, 2)
  quantity   Int

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
}

model DriverProfile {
  userId      String   @id
  vehicleType String?
  licenseNo   String?
  isAvailable Boolean  @default(false)
  currentLat  Float?
  currentLng  Float?
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ASSIGNED
  PICKED_UP
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CASH
  CARD
}
